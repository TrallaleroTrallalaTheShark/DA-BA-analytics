# dashboard_app.py
import streamlit as st
import pandas as pd
# import sqlite3 # Kh√¥ng c·∫ßn n·ªØa n·∫øu ch·ªâ ƒë·ªçc CSV
import os
import json
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from collections import Counter

# --- C·∫•u h√¨nh Trang Streamlit ---
st.set_page_config(
    page_title="Dashboard Ph√¢n T√≠ch Vi·ªác L√†m DA/BA",
    page_icon="üöÄ",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': 'https://www.example.com/help', 
        'Report a bug': "https://www.example.com/bug",
        'About': "# Dashboard Ph√¢n T√≠ch Th·ªã Tr∆∞·ªùng Vi·ªác L√†m DA/BA\nƒê√¢y l√† s·∫£n ph·∫©m c·ªßa Nh√≥m 6."
    }
)

# --- T√™n file CSV ch·ª©a d·ªØ li·ªáu t·ªïng h·ª£p ƒë√£ l√†m s·∫°ch ---
# File n√†y s·∫Ω n·∫±m trong repository GitHub c·ªßa b·∫°n, c√πng c·∫•p v·ªõi dashboard_app.py
DATA_CSV_PATH = "data_cleaned.csv" 

# --- H√†m T·∫£i D·ªØ Li·ªáu t·ª´ CSV (c√≥ cache) ---
@st.cache_data # Cache d·ªØ li·ªáu ƒë·ªÉ kh√¥ng ph·∫£i t·∫£i l·∫°i m·ªói l·∫ßn t∆∞∆°ng t√°c
def load_data_from_csv(csv_file_path):
    """T·∫£i d·ªØ li·ªáu t·ª´ file CSV v√† th·ª±c hi·ªán c√°c chuy·ªÉn ƒë·ªïi ki·ªÉu c∆° b·∫£n."""
    try:
        # Khi deploy tr√™n Streamlit Cloud, n√≥ s·∫Ω ƒë·ªçc file t·ª´ root c·ªßa repo
        df = pd.read_csv(csv_file_path)
        print(f"ƒê√£ t·∫£i th√†nh c√¥ng {len(df)} b·∫£n ghi t·ª´ file CSV: {csv_file_path}") # Log cho local debug
        
        # X·ª≠ l√Ω ki·ªÉu d·ªØ li·ªáu ngay sau khi t·∫£i
        if not df.empty:
            if 'posted_datetime_str' in df.columns:
                df['posted_datetime'] = pd.to_datetime(df['posted_datetime_str'], errors='coerce')
                if df['posted_datetime'].notna().any():
                    df['posted_year_month'] = df['posted_datetime'].dt.to_period('M')
            
            numeric_cols = ['salary_min_vnd', 'salary_max_vnd', 'days_to_deadline', 
                            'experience_years_min_numeric', 'views_count']
            for col in numeric_cols:
                if col in df.columns:
                    df[col] = pd.to_numeric(df[col], errors='coerce').astype('Int64')
            
            def parse_json_list_safe(json_string):
                if pd.isna(json_string) or not isinstance(json_string, str): return []
                try:
                    # Ki·ªÉm tra xem c√≥ ph·∫£i l√† chu·ªói r·ªóng ƒë·∫°i di·ªán cho list r·ªóng kh√¥ng
                    if json_string.strip() == '[]': return []
                    data = json.loads(json_string)
                    return data if isinstance(data, list) else []
                except json.JSONDecodeError: 
                    # print(f"L·ªói parse JSON cho: {json_string}") # Debug
                    return [] # Tr·∫£ v·ªÅ list r·ªóng n·∫øu kh√¥ng parse ƒë∆∞·ª£c

            # T·∫°o c·ªôt parsed_skills_or_tags t·ª´ c·∫£ hai ngu·ªìn
            # Gi·∫£ s·ª≠ file CSV ƒë√£ c√≥ c·ªôt skills_list_json_vnw v√† job_tags_list_json_cv
            df['parsed_skills_or_tags'] = pd.Series([[] for _ in range(len(df))], dtype=object)
            if 'skills_list_json_vnw' in df.columns:
                mask_vnw_skills = df['source_website'] == 'VietnamWorks'
                df.loc[mask_vnw_skills, 'parsed_skills_or_tags'] = df.loc[mask_vnw_skills, 'skills_list_json_vnw'].apply(parse_json_list_safe)
            
            if 'job_tags_list_json_cv' in df.columns:
                mask_cv_tags = df['source_website'] == 'CareerViet'
                # N·∫øu parsed_skills_or_tags c·ªßa CV ch∆∞a c√≥ g√¨, g√°n t·ª´ job_tags_list_json_cv
                # Ho·∫∑c b·∫°n c√≥ th·ªÉ quy·∫øt ƒë·ªãnh g·ªôp (extend) n·∫øu m·ªôt job c√≥ c·∫£ hai
                df.loc[mask_cv_tags & (df['parsed_skills_or_tags'].apply(len) == 0), 'parsed_skills_or_tags'] = \
                    df.loc[mask_cv_tags, 'job_tags_list_json_cv'].apply(parse_json_list_safe)
        
        return df, None # Tr·∫£ v·ªÅ DataFrame v√† kh√¥ng c√≥ l·ªói
    except FileNotFoundError:
        st.error(f"L·ªñI: File CSV '{csv_file_path}' kh√¥ng t√¨m th·∫•y. H√£y ƒë·∫£m b·∫£o file n√†y t·ªìn t·∫°i trong repository GitHub c·ªßa b·∫°n c√πng c·∫•p v·ªõi file app.")
        return pd.DataFrame(), f"L·ªñI: File CSV '{csv_file_path}' kh√¥ng t√¨m th·∫•y."
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i ho·∫∑c x·ª≠ l√Ω d·ªØ li·ªáu t·ª´ CSV: {e}")
        return pd.DataFrame(), f"L·ªói khi t·∫£i ho·∫∑c x·ª≠ l√Ω d·ªØ li·ªáu t·ª´ CSV: {e}"

# --- H√†m t·∫°o c·ªôt Job Role Group ---
def categorize_job_role_st(title):
    # (Gi·ªØ nguy√™n h√†m categorize_job_role_st t·ª´ code Streamlit tr∆∞·ªõc)
    title_lower = str(title).lower()
    if any(kw in title_lower for kw in ['hr data analyst']): return 'HR Data Analyst'
    if any(kw in title_lower for kw in ['data analyst', 'ph√¢n t√≠ch d·ªØ li·ªáu', 'bi analyst', 'business intelligence analyst', 'insight analyst', 'data analytics', 'quantitative researcher']): return 'Data Analyst'
    if any(kw in title_lower for kw in ['business analyst', 'ph√¢n t√≠ch kinh doanh', 'ph√¢n t√≠ch nghi·ªáp v·ª•', 'it ba', 'technical business analyst', 'system analyst', 'ph√¢n t√≠ch h·ªá th·ªëng', 'process analyst']): return 'Business Analyst'
    if any(kw in title_lower for kw in ['product owner']): return 'Product Owner'
    if any(kw in title_lower for kw in ['product manager']): return 'Product Manager'
    return 'Kh√°c'

# --- CSS T√πy ch·ªânh (Gi·ªØ nguy√™n t·ª´ code Streamlit tr∆∞·ªõc) ---
def load_custom_css():
    st.markdown("""
    <style>
        /* Keyframes cho hi·ªáu ·ª©ng rainbow */
        @keyframes rainbowText {
            0% { color: #ff0000; } 14% { color: #ff7f00; } 28% { color: #ffff00; }
            42% { color: #00ff00; } 57% { color: #0000ff; } 71% { color: #4b0082; }
            85% { color: #8b00ff; } 100% { color: #ff0000; }
        }
        h1 {
            text-align: center; font-family: 'Arial Black', Gadget, sans-serif;
            font-size: 2.5em; animation: rainbowText 10s infinite linear;
            background: linear-gradient(to right, #ff0000, #ff7f00, #ffff00, #00ff00, #0000ff, #4b0082, #8b00ff, #ff0000);
            -webkit-background-clip: text; background-clip: text; color: transparent;
        }
        h2 { color: #2980b9; border-bottom: 2px solid #2980b9; padding-bottom: 5px; margin-top: 40px; }
        h3 { color: #34495e; margin-top: 30px; }
        .css-1d391kg { background-color: #f8f9fa; } /* Sidebar class, c√≥ th·ªÉ thay ƒë·ªïi */
        .stButton>button { border-radius: 20px; border: 1px solid #2980b9; color: #2980b9; transition: all 0.3s ease; }
        .stButton>button:hover { background-color: #2980b9; color: white; border-color: #2980b9;}
        .stMetric { background-color: #ffffff; border-left: 5px solid #1abc9c; padding: 15px; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); transition: transform 0.2s ease-in-out; }
        .stMetric:hover { transform: translateY(-3px); }
        .stDataFrame { border-radius: 8px; overflow: hidden; }
    </style>
    """, unsafe_allow_html=True)

# --- T·∫£i d·ªØ li·ªáu ---
df_master, error_message = load_data_from_csv(DATA_CSV_PATH) # G·ªçi h√†m ƒë·ªçc CSV

# --- X√¢y d·ª±ng Giao di·ªán Streamlit ---
load_custom_css() 

st.title("üöÄ Dashboard Ph√¢n T√≠ch Th·ªã Tr∆∞·ªùng Vi·ªác L√†m DA/BA")
st.markdown("Kh√°m ph√° c√°c xu h∆∞·ªõng tuy·ªÉn d·ª•ng m·ªõi nh·∫•t cho ng√†nh Ph√¢n t√≠ch D·ªØ li·ªáu v√† Ph√¢n t√≠ch Kinh doanh t·∫°i Vi·ªát Nam.")
st.markdown("---")

if error_message: 
    st.error(error_message)
elif df_master.empty:
    st.warning("Hi·ªán kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã. Vui l√≤ng ki·ªÉm tra l·∫°i file CSV ho·∫∑c ch·∫°y script thu th·∫≠p/x·ª≠ l√Ω d·ªØ li·ªáu.")
else:
    if 'job_title' in df_master.columns and 'job_role_group' not in df_master.columns:
        df_master['job_role_group'] = df_master['job_title'].apply(categorize_job_role_st)

    # --- Sidebar cho B·ªô l·ªçc (Gi·ªØ nguy√™n) ---
    st.sidebar.image("https://images.unsplash.com/photo-1551288049-bebda4e38f71?ixlib=rb-1.2.1&auto=format&fit=crop&w=750&q=80", caption="Data Analytics", use_column_width=True) 
    st.sidebar.header("B·ªô l·ªçc D·ªØ li·ªáu üõ†Ô∏è")
    source_options = ["T·∫•t c·∫£"] + sorted(df_master['source_website'].unique().tolist())
    selected_source = st.sidebar.selectbox("Ngu·ªìn Website:", source_options, help="Ch·ªçn ngu·ªìn d·ªØ li·ªáu b·∫°n mu·ªën xem.")
    location_options = ["T·∫•t c·∫£"] + sorted(df_master['location_primary'].dropna().unique().tolist())
    selected_location = st.sidebar.selectbox("ƒê·ªãa ƒëi·ªÉm:", location_options, help="L·ªçc theo th√†nh ph·ªë/khu v·ª±c ch√≠nh.")
    selected_role = "T·∫•t c·∫£"
    if 'job_role_group' in df_master.columns:
        role_options = ["T·∫•t c·∫£"] + sorted(df_master['job_role_group'].dropna().unique().tolist())
        selected_role = st.sidebar.selectbox("Vai tr√≤ ch√≠nh:", role_options, help="L·ªçc theo nh√≥m vai tr√≤ c√¥ng vi·ªác.")
    min_exp_data, max_exp_data = 0, 20 
    if 'experience_years_min_numeric' in df_master.columns and df_master['experience_years_min_numeric'].notna().any():
        min_exp_data_val = df_master['experience_years_min_numeric'].min(skipna=True)
        max_exp_data_val = df_master['experience_years_min_numeric'].max(skipna=True)
        if pd.notna(min_exp_data_val): min_exp_data = int(min_exp_data_val)
        if pd.notna(max_exp_data_val): max_exp_data = int(max_exp_data_val)
        if max_exp_data < min_exp_data : max_exp_data = min_exp_data 
    selected_exp_range = st.sidebar.slider("S·ªë nƒÉm kinh nghi·ªám t·ªëi thi·ªÉu:", min_exp_data, max_exp_data, (min_exp_data, max_exp_data))

    # √Åp d·ª•ng b·ªô l·ªçc
    df_filtered = df_master.copy()
    if selected_source != "T·∫•t c·∫£": df_filtered = df_filtered[df_filtered['source_website'] == selected_source]
    if selected_location != "T·∫•t c·∫£": df_filtered = df_filtered[df_filtered['location_primary'] == selected_location]
    if 'job_role_group' in df_filtered.columns and selected_role != "T·∫•t c·∫£": df_filtered = df_filtered[df_filtered['job_role_group'] == selected_role]
    if 'experience_years_min_numeric' in df_filtered.columns and not df_filtered.empty: # Th√™m ki·ªÉm tra df_filtered kh√¥ng r·ªóng
        df_filtered = df_filtered[(df_filtered['experience_years_min_numeric'] >= selected_exp_range[0]) & (df_filtered['experience_years_min_numeric'] <= selected_exp_range[1])]
    
    # --- Hi·ªÉn th·ªã Th√¥ng tin T·ªïng quan (Gi·ªØ nguy√™n) ---
    st.header("üìà T·ªïng Quan D·ªØ Li·ªáu (Sau l·ªçc)")
    if not df_filtered.empty:
        total_jobs_filtered = len(df_filtered)
        latest_update_time = "Kh√¥ng r√µ"
        # Gi·∫£ s·ª≠ file CSV ƒë∆∞·ª£c c·∫≠p nh·∫≠t b·ªüi process_timestamp t·ª´ b·∫£ng master
        if 'process_timestamp' in df_filtered.columns and df_filtered['process_timestamp'].notna().any():
            try: latest_update_time = pd.to_datetime(df_filtered['process_timestamp'].max()).strftime('%H:%M:%S %d/%m/%Y')
            except: pass
        kpi_col1, kpi_col2, kpi_col3 = st.columns(3)
        kpi_col1.metric(label="T·ªïng s·ªë Tin Tuy·ªÉn D·ª•ng", value=f"{total_jobs_filtered:,}")
        avg_exp_val = df_filtered['experience_years_min_numeric'].median() if 'experience_years_min_numeric' in df_filtered.columns and df_filtered['experience_years_min_numeric'].notna().any() else "N/A"
        kpi_col2.metric(label="Kinh nghi·ªám TB (Median)", value=f"{avg_exp_val} nƒÉm" if avg_exp_val != "N/A" else "N/A")
        kpi_col3.metric(label="D·ªØ li·ªáu c·∫≠p nh·∫≠t l√∫c", value=latest_update_time)
        if st.sidebar.checkbox("Hi·ªÉn th·ªã d·ªØ li·ªáu m·∫´u (10 d√≤ng ƒë·∫ßu)", value=False, key="show_sample_data"):
            st.subheader("üîç D·ªØ li·ªáu m·∫´u")
            st.dataframe(df_filtered.head(10).reset_index(drop=True))
    else: st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu n√†o kh·ªõp v·ªõi b·ªô l·ªçc c·ªßa b·∫°n.")
    st.markdown("---")

    # --- C√°c Tab Ph√¢n T√≠ch (Gi·ªØ nguy√™n logic, ch·ªâ thay ƒë·ªïi c√°ch hi·ªÉn th·ªã n·∫øu c·∫ßn) ---
    if not df_filtered.empty:
        st.header("üí° Insights Chi Ti·∫øt")
        tab1, tab2, tab3, tab4 = st.tabs(["üåç ƒê·ªãa ƒêi·ªÉm & Vai Tr√≤", "üõ†Ô∏è Kinh Nghi·ªám & K·ªπ NƒÉng", "üí∞ L∆∞∆°ng & Ph√∫c L·ª£i", "üìÖ Xu H∆∞·ªõng Th·ªùi Gian"])
        # ... (Copy to√†n b·ªô n·ªôi dung c√°c tab t·ª´ code Streamlit tr∆∞·ªõc c·ªßa b·∫°n) ...
        with tab1:
            col_loc, col_role = st.columns(2)
            with col_loc:
                if 'location_primary' in df_filtered.columns:
                    location_counts_f = df_filtered['location_primary'].value_counts().head(7)
                    if not location_counts_f.empty:
                        fig_loc = px.bar(location_counts_f, x=location_counts_f.index, y=location_counts_f.values, labels={'x':'ƒê·ªãa ƒëi·ªÉm', 'y':'S·ªë l∆∞·ª£ng tin'}, title="<b>Top 7 ƒê·ªãa ƒëi·ªÉm Tuy·ªÉn d·ª•ng</b>", color=location_counts_f.index, color_discrete_sequence=px.colors.qualitative.Pastel1)
                        fig_loc.update_layout(xaxis_tickangle=-45, title_x=0.5, font=dict(family="Arial, sans-serif")); st.plotly_chart(fig_loc, use_container_width=True)
            with col_role:
                if 'job_role_group' in df_filtered.columns:
                    role_counts_f = df_filtered['job_role_group'].value_counts()
                    if not role_counts_f.empty:
                        fig_role = px.pie(role_counts_f, values=role_counts_f.values, names=role_counts_f.index, title="<b>T·ª∑ l·ªá theo Vai tr√≤ ch√≠nh</b>", hole=.4, color_discrete_sequence=px.colors.sequential.Agsunset)
                        fig_role.update_traces(textposition='inside', textinfo='percent+label'); fig_role.update_layout(title_x=0.5, font=dict(family="Arial, sans-serif")); st.plotly_chart(fig_role, use_container_width=True)
        with tab2:
            col_exp_skill1, col_exp_skill2 = st.columns(2)
            with col_exp_skill1:
                if 'experience_years_min_numeric' in df_filtered.columns:
                    if 'experience_group' not in df_filtered.columns or df_filtered['experience_group'].isnull().all() :
                        def group_experience_st(years):
                            if pd.isna(years): return "Kh√¥ng r√µ"; 
                            if years == 0: return "0 (Fresher)"; 
                            if 1 <= years <= 2: return "1-2 nƒÉm"; 
                            if 3 <= years <= 5: return "3-5 nƒÉm"; 
                            if years > 5: return ">5 nƒÉm"; return "Kh√°c"
                        df_filtered.loc[:, 'experience_group'] = df_filtered['experience_years_min_numeric'].apply(group_experience_st)
                    if 'experience_group' in df_filtered.columns:
                        exp_group_counts_f = df_filtered['experience_group'].value_counts()
                        if not exp_group_counts_f.empty:
                            fig_exp = px.bar(exp_group_counts_f, x=exp_group_counts_f.index, y=exp_group_counts_f.values, labels={'x':'Nh√≥m kinh nghi·ªám', 'y':'S·ªë l∆∞·ª£ng tin'}, title="<b>S·ªë tin theo Nh√≥m Kinh nghi·ªám</b>", color=exp_group_counts_f.index, color_discrete_sequence=px.colors.qualitative.Safe)
                            fig_exp.update_layout(title_x=0.5, font=dict(family="Arial, sans-serif")); st.plotly_chart(fig_exp, use_container_width=True)
            with col_exp_skill2:
                if 'parsed_skills_or_tags' in df_filtered.columns:
                    st.write("**Top 10 K·ªπ nƒÉng/Tags ph·ªï bi·∫øn**")
                    all_skills_tags_list_f = []; df_filtered['parsed_skills_or_tags'].dropna().apply(lambda skills_list: all_skills_tags_list_f.extend([skill.lower().strip() for skill in skills_list if skill.strip()]))
                    if all_skills_tags_list_f:
                        skill_tag_counts_f = pd.Series(all_skills_tags_list_f).value_counts().head(10)
                        fig_skill = px.bar(skill_tag_counts_f, y=skill_tag_counts_f.index, x=skill_tag_counts_f.values, orientation='h', labels={'y':'K·ªπ nƒÉng/Tag', 'x':'S·ªë l·∫ßn xu·∫•t hi·ªán'}, title="<b>Top 10 K·ªπ nƒÉng/Tags</b>", color=skill_tag_counts_f.values, color_continuous_scale=px.colors.sequential.Tealgrn)
                        fig_skill.update_layout(yaxis={'categoryorder':'total ascending'}, title_x=0.5, font=dict(family="Arial, sans-serif")); st.plotly_chart(fig_skill, use_container_width=True)
                    else: st.write("Kh√¥ng c√≥ d·ªØ li·ªáu k·ªπ nƒÉng/tags.")
        with tab3:
            if 'salary_min_vnd' in df_filtered.columns and 'salary_negotiable' in df_filtered.columns:
                df_salary_plot_f = df_filtered[(df_filtered['salary_negotiable'] == False) & (df_filtered['salary_min_vnd'].notna())].copy()
                if not df_salary_plot_f.empty:
                    st.write(f"Ph√¢n t√≠ch tr√™n {len(df_salary_plot_f)} tin c√≥ m·ª©c l∆∞∆°ng c·ª• th·ªÉ:")
                    if 'salary_avg_vnd' not in df_salary_plot_f.columns: # T·∫°o n·∫øu ch∆∞a c√≥
                        df_salary_plot_f['salary_avg_vnd'] = df_salary_plot_f[['salary_min_vnd', 'salary_max_vnd']].mean(axis=1)
                        min_only_mask = df_salary_plot_f['salary_avg_vnd'].isna() & df_salary_plot_f['salary_min_vnd'].notna(); df_salary_plot_f.loc[min_only_mask, 'salary_avg_vnd'] = df_salary_plot_f.loc[min_only_mask, 'salary_min_vnd']
                        max_only_mask = df_salary_plot_f['salary_avg_vnd'].isna() & df_salary_plot_f['salary_max_vnd'].notna(); df_salary_plot_f.loc[max_only_mask, 'salary_avg_vnd'] = df_salary_plot_f.loc[max_only_mask, 'salary_max_vnd']
                        df_salary_plot_f.dropna(subset=['salary_avg_vnd'], inplace=True)
                    
                    if not df_salary_plot_f.empty:
                        fig_salary = px.histogram(df_salary_plot_f, x="salary_min_vnd", nbins=15, title="<b>Ph√¢n b·ªï L∆∞∆°ng T·ªëi thi·ªÉu (VND/th√°ng)</b>", labels={'salary_min_vnd':'L∆∞∆°ng t·ªëi thi·ªÉu (VND)'}, opacity=0.8, color_discrete_sequence=['#2ecc71'])
                        fig_salary.update_layout(bargap=0.1, title_x=0.5, font=dict(family="Arial, sans-serif")); st.plotly_chart(fig_salary, use_container_width=True)
                        if 'job_role_group' in df_salary_plot_f.columns:
                            st.write("**L∆∞∆°ng t·ªëi thi·ªÉu trung v·ªã theo Vai tr√≤:**"); st.dataframe(df_salary_plot_f.groupby('job_role_group')['salary_min_vnd'].median().apply(lambda x: f"{x/1000000:,.1f} Tr" if pd.notna(x) else "N/A").sort_values(ascending=False).reset_index().rename(columns={'job_role_group':'Vai tr√≤', 'salary_min_vnd':'L∆∞∆°ng trung v·ªã (Min)'}))
                    else: st.write("Kh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu l∆∞∆°ng c·ª• th·ªÉ (sau khi t√≠nh avg) ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì.")
                else: st.write("Kh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu l∆∞∆°ng c·ª• th·ªÉ ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì.")
            if 'benefits_text' in df_filtered.columns:
                st.write("**Ph√∫c l·ª£i th∆∞·ªùng g·∫∑p (Top 10)**")
                try:
                    all_benefits = []; df_filtered['benefits_text'].dropna().astype(str).apply(lambda x: all_benefits.extend([b.strip().lower() for b in x.split(';') if b.strip() and b.lower() != 'kh√¥ng c√≥ th√¥ng tin']))
                    if all_benefits:
                        benefit_counts_f = pd.Series(all_benefits).value_counts().head(10)
                        fig_benefits = px.bar(benefit_counts_f, x=benefit_counts_f.index, y=benefit_counts_f.values, labels={'x':'Ph√∫c l·ª£i', 'y':'S·ªë l·∫ßn ƒë·ªÅ c·∫≠p'}, title="<b>Top 10 Ph√∫c l·ª£i</b>", color=benefit_counts_f.values, color_continuous_scale=px.colors.sequential.Magenta)
                        fig_benefits.update_layout(xaxis_tickangle=-45, title_x=0.5, font=dict(family="Arial, sans-serif")); st.plotly_chart(fig_benefits, use_container_width=True)
                    else: st.write("Kh√¥ng c√≥ d·ªØ li·ªáu ph√∫c l·ª£i.")
                except Exception as e_ben: st.write(f"L·ªói khi ph√¢n t√≠ch ph√∫c l·ª£i: {e_ben}")
        with tab4:
            if 'posted_year_month' in df_filtered.columns:
                df_filtered_for_trend = df_filtered.copy() # T·∫°o b·∫£n sao ƒë·ªÉ tr√°nh SettingWithCopyWarning
                df_filtered_for_trend.loc[:, 'posted_year_month_dt'] = df_filtered_for_trend['posted_year_month'].apply(lambda x: x.to_timestamp() if pd.notna(x) else pd.NaT)
                monthly_counts_f = df_filtered_for_trend.dropna(subset=['posted_year_month_dt']).set_index('posted_year_month_dt').resample('M')['url'].count().sort_index()
                if not monthly_counts_f.empty:
                    fig_trend = px.line(monthly_counts_f, x=monthly_counts_f.index, y=monthly_counts_f.values, markers=True, labels={'x':'Th√°ng/NƒÉm ƒëƒÉng tin', 'y':'S·ªë l∆∞·ª£ng tin'}, title='<b>Xu h∆∞·ªõng s·ªë l∆∞·ª£ng tin ƒëƒÉng theo Th√°ng</b>')
                    fig_trend.update_layout(xaxis_tickangle=-45, title_x=0.5, font=dict(family="Arial, sans-serif")); st.plotly_chart(fig_trend, use_container_width=True)
                else: st.write("Kh√¥ng ƒë·ªß d·ªØ li·ªáu ng√†y th√°ng ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì xu h∆∞·ªõng.")
            else: st.write("Thi·∫øu c·ªôt 'posted_year_month' ƒë·ªÉ ph√¢n t√≠ch xu h∆∞·ªõng.")

    # --- Th√¥ng b√°o cu·ªëi trang ---
    st.markdown("---")
    st.markdown("D·ª± √°n ƒë∆∞·ª£c th·ª±c hi·ªán b·ªüi Nh√≥m 6") # Thay "Nh√≥m c·ªßa b·∫°n"
    st.markdown(f"D·ªØ li·ªáu ƒë∆∞·ª£c t·ªïng h·ª£p t·ª´ VietnamWorks v√† CareerViet, x·ª≠ l√Ω l·∫ßn cu·ªëi v√†o: {latest_update_time if 'latest_update_time' in locals() and latest_update_time != 'Kh√¥ng r√µ' else 'Ch∆∞a c√≥ th√¥ng tin'}")